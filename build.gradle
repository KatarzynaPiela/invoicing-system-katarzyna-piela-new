buildscript {
    ext {
        lombokVersion = '1.18.16'
        // 1.18.18 is broken - lombok.config is ignored, try to upgrade to 1.18.20 when available
    }
}

plugins {
    // Apply the groovy plugin to also add support for Groovy (needed for Spock)
    id 'groovy'

    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'

    id 'checkstyle'

    id 'jacoco'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use the latest Groovy version for Spock testing
    testImplementation 'org.codehaus.groovy:groovy:3.0.13'

    // Use the awesome Spock testing and specification framework even with Java
    testImplementation 'org.spockframework:spock-core:2.2-groovy-3.0'
    testImplementation 'junit:junit:4.13.2'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:31.1-jre'


    implementation 'com.fasterxml.jackson.core:jackson-databind:2.11.1'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.11.1'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.11.1'
   
  
    implementation 'org.projectlombok:lombok:1.18.30'
   



    //Lombok
    annotationProcessor("org.projectlombok:lombok:${lombokVersion}")
    testAnnotationProcessor("org.projectlombok:lombok:${lombokVersion}")
    compileOnly("org.projectlombok:lombok:${lombokVersion}")
    testCompileOnly("org.projectlombok:lombok:${lombokVersion}")

}

application {
    // Define the main class for the application.
    mainClass = 'pl.futurecollars.invoicing.App'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

checkstyle {
    showViolations = true
    ignoreFailures = false
    maxWarnings = 0
    maxErrors = 0


}
jacocoTestReport {
    dependsOn test // tests are required to run before generating the report

    jacoco {
        toolVersion = "0.8.8"
        reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')

        jacocoTestReport {
            reports {
                xml.required = false
                csv.required = false
                html.outputLocation = layout.buildDirectory.dir('jacocoHtml')

                jacocoTestCoverageVerification {
                    violationRules {
                        rule {
                            limit {
                                counter = 'BRANCH'
                                minimum = 0.70
                            }
                        }

                        rule {
                            limit {
                                counter = 'LINE'
                                minimum = 0.70
                            }
                        }
                    }
                }

}

test {
    finalizedBy jacocoTestReport // report is always generated after tests run
    finalizedBy jacocoTestCoverageVerification
}
jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
}


          
}